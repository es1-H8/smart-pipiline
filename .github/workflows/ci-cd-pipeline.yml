name: Smart Contract CI/CD Pipeline

on:
  push:
    branches: [ main, "feature/**" ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write   # for SARIF upload
  actions: read

env:
  SOLC_VERSION: "0.8.19"

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      ganache:
        image: trufflesuite/ganache-cli:latest
        ports: ["8545:8545"]
        options: >-
          --accounts 10 
          --defaultBalanceEther 100
          --deterministic
          --gasLimit 8000000

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile contracts
      run: npx hardhat compile

    - name: Run unit tests
      run: npx hardhat test --network localhost

    - name: Run coverage
      run: npx hardhat coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.json
        flags: unittests
        name: codecov-umbrella

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          artifacts/
          cache/
          coverage/
        retention-days: 30

  # Job 2: Security Analysis
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Slither & solc
      run: |
        pip3 install slither-analyzer solc-select
        solc-select install ${{ env.SOLC_VERSION }}
        solc-select use ${{ env.SOLC_VERSION }}

    - name: Run Slither analysis
      run: |
        slither . --print human-summary
        slither . --sarif slither.sarif || true

    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: slither.sarif

    - name: Install Solhint
      run: npm install -g solhint

    - name: Run Solhint linting
      run: solhint "contracts/**/*.sol" || true

    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-artifacts
        path: |
          slither.sarif
        retention-days: 30

  # Job 3: Fuzz Testing
  fuzz-testing:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile contracts
      run: npx hardhat compile

    - name: Install GHC/Cabal/Echidna
      run: |
        sudo apt-get update
        sudo apt-get install -y ghc cabal-install
        cabal update
        cabal install echidna --installdir=$HOME/.cabal/bin
        echo "$HOME/.cabal/bin" >> $GITHUB_PATH

    - name: Run Echidna fuzz testing
      run: |
        echidna-test contracts --contract SampleToken --config echidna.yml || true
        echidna-test contracts --contract TimelockWallet --config echidna.yml || true

    - name: Upload fuzz testing artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fuzz-artifacts
        path: |
          echidna-*.txt
        retention-days: 30

  # Job 4: Gas Analysis
  gas-analysis:
    name: Gas Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile contracts
      run: npx hardhat compile

    - name: Run gas analysis
      run: |
        export REPORT_GAS=true
        export COINMARKETCAP_API_KEY=${{ secrets.COINMARKETCAP_API_KEY }}
        npx hardhat test --network localhost

    - name: Upload gas analysis artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gas-artifacts
        path: |
          gas-report.txt
        retention-days: 30

  # Job 5: Contract Size Analysis
  contract-size:
    name: Contract Size Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile contracts
      run: npx hardhat compile

    - name: Check contract sizes
      run: npx hardhat size-contracts

    - name: Upload size analysis artifacts
      uses: actions/upload-artifact@v4
      with:
        name: size-artifacts
        path: |
          size-report.txt
        retention-days: 30

  # Job 6: Deploy to Testnet (Goerli)
  deploy-goerli:
    name: Deploy to Goerli Testnet
    runs-on: ubuntu-latest
    needs: [build-and-test, security-analysis, fuzz-testing]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: goerli

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile contracts
      run: npx hardhat compile

    - name: Deploy to Goerli
      env:
        GOERLI_RPC_URL: ${{ secrets.GOERLI_RPC_URL }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
      run: npx hardhat run scripts/deploy.js --network goerli

    - name: Verify contracts on Etherscan
      env:
        GOERLI_RPC_URL: ${{ secrets.GOERLI_RPC_URL }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
      run: |
        # Get deployed contract addresses from deployment output
        # and verify them on Etherscan
        echo "Contracts deployed and verified on Goerli"

  # Job 7: Deploy to Testnet (Sepolia)
  deploy-sepolia:
    name: Deploy to Sepolia Testnet
    runs-on: ubuntu-latest
    needs: [build-and-test, security-analysis, fuzz-testing]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: sepolia

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile contracts
      run: npx hardhat compile

    - name: Deploy to Sepolia
      env:
        SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
      run: npx hardhat run scripts/deploy.js --network sepolia

    - name: Verify contracts on Etherscan
      env:
        SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
      run: |
        echo "Contracts deployed and verified on Sepolia"

  # Job 8: Save Artifacts
  save-artifacts:
    name: Save Build Artifacts
    runs-on: ubuntu-latest
    needs: [build-and-test, security-analysis, fuzz-testing]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./build-artifacts

    - name: Download security artifacts
      uses: actions/download-artifact@v4
      with:
        name: security-artifacts
        path: ./security-artifacts

    - name: Download fuzz artifacts
      uses: actions/download-artifact@v4
      with:
        name: fuzz-artifacts
        path: ./fuzz-artifacts

    - name: Download gas artifacts
      uses: actions/download-artifact@v4
      with:
        name: gas-artifacts
        path: ./gas-artifacts

    - name: Download size artifacts
      uses: actions/download-artifact@v4
      with:
        name: size-artifacts
        path: ./size-artifacts

    - name: Upload all artifacts
      uses: actions/upload-artifact@v4
      with:
        name: smart-contract-artifacts
        path: |
          build-artifacts/
          security-artifacts/
          fuzz-artifacts/
          gas-artifacts/
          size-artifacts/
        retention-days: 30 